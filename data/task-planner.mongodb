// MongoDB Playground
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

const database = 'task_planner';
const taskCollection = 'tasks';
const listCollection = 'lists';
const notificationCollection = 'notifications';
const counters = 'counters';

// Create a new database.
use(database);

// Create a new collection.
db.createCollection(taskCollection);
db.createCollection(listCollection);
db.createCollection(notificationCollection);
db.createCollection(counters);

db.counters.insert({
  "_id": "list_id",
  "sequence_value": 0
})

function getNextSequenceValue(sequenceName){
   var sequenceDocument = db.counters.findAndModify({
      query:{_id: sequenceName },
      update: {$inc:{sequence_value:1}},
      new:true
   });
   return sequenceDocument.sequence_value;
}

db.lists.insert({
  _id: getNextSequenceValue("list_id"),
  type: "SYSTEM",
  name: "Today",
  isVisible: true
})

db.lists.insert({
  _id: getNextSequenceValue("list_id"),
  type: "SYSTEM",
  name: "Tomorrow",
  isVisible: true
})

db.lists.insert({
  _id: getNextSequenceValue("list_id"),
  type: "SYSTEM",
  name: "This Week",
  isVisible: true
})

// The prototype form to create a regular collection:
/* db.createCollection( <name>,
  {
    capped: <boolean>,
    autoIndexId: <boolean>,
    size: <number>,
    max: <number>,
    storageEngine: <document>,
    validator: <document>,
    validationLevel: <string>,
    validationAction: <string>,
    indexOptionDefaults: <document>,
    viewOn: <string>,
    pipeline: <pipeline>,
    collation: <document>,
    writeConcern: <document>
  }
) */

// The prototype form to create a time-series collection:
/* db.createCollection( <name>,
  {
    timeseries: {
      timeField: <string>,
      metaField: <string>,
      expireAfterSeconds: <number>
    }
  }
) */
